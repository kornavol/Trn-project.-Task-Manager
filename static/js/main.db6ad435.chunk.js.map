{"version":3,"sources":["components/Name.jsx","components/Task.jsx","components/Timer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Name","useState","className","onSubmit","e","preventDefault","setState","id","target","value","type","state","Task","props","taskAdder","defaultValue","taskState","Timer","time","stateBtn","tasks","counter","keyCounter","App","setTaskState","start","BtnShower","setstateBtn","onClick","clickStartB","clickStopB","setTime","timer","Date","now","period","forEach","item","status","statusChanger","console","log","showTasks","map","title","currentTime","days","Math","floor","hours","minutes","seconds","taskTitle","random","newTask","length","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db6ad435.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport \"./Name.css\";\r\n\r\nexport default function Name() {\r\n\r\n  let userNameHandler = (e) => {\r\n    e.preventDefault();\r\n    setState(\r\n      <div id=\"name\"> {e.target[0].value} </div>\r\n    );\r\n\r\n  }\r\n\r\n  const [state, setState] = useState(\r\n    <div className=\"name-form\">\r\n\r\n      <form onSubmit={userNameHandler}>\r\n        <label className=\"blink_me\">PLEASE FIRST TYPE YOUR NAME</label>\r\n        <input id=\"name-input\" type=\"text\" />\r\n        <input className=\"button form-button5\" type=\"submit\" value=\"Send\" />\r\n      </form>\r\n\r\n    </div>\r\n\r\n\r\n  );\r\n\r\n  return state\r\n\r\n}","import './Task.css';\r\n\r\n\r\nexport default function Task(props) {\r\n   \r\n\r\n    return (\r\n        <div className=\"tasks\">\r\n            <p>time to work</p>\r\n            <form className=\"task-form\" onSubmit={props.taskAdder}>\r\n                {/* <label>New Task</label> */}\r\n                <input id=\"task-input\" type=\"text\" defaultValue=\"add new task\"/>\r\n                <input className=\"add-button\" type=\"submit\" value=\"Add\" />\r\n            </form>\r\n            {props.taskState}\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n    )\r\n\r\n}","import './Time.css';\r\n\r\nexport default function Timer(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className = \"timer\">\r\n                <div className =\"time\">{props.time}</div>\r\n            \r\n                <div id=\"time-buttons\">\r\n                    {props.stateBtn}\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import './App.css';\r\n\r\nimport { useState } from 'react';\r\n\r\nimport Name from './components/Name.jsx'\r\nimport Task from './components/Task.jsx'\r\nimport Timer from './components/Timer.jsx'\r\n\r\n\r\n/* DB of Tasks */\r\nlet tasks = [];\r\nlet counter = 1;\r\nlet keyCounter = 0;\r\n\r\nfunction App() {\r\n\r\n  /* adding task to a  DOM */\r\n  const [taskState, setTaskState] = useState('');\r\n    /* Start\\stop toggle */\r\n\r\n\r\n  /* start time, declared outside of function because we need to keep a value */\r\n  let start = 0;\r\n\r\n  /* rendering Start\\stop button  */\r\n  function BtnShower(e) {\r\n    setstateBtn(() => {\r\n      // console.log(e.target.id);\r\n      if (e.target.id === 'stopBtn') {\r\n        return (\r\n          <button id=\"srtBtn\" className=\"button form-button5 time-button\" onClick={clickStartB}>Start</button>\r\n        )\r\n      } else if (e.target.id === 'srtBtn') {\r\n        return (\r\n          <button id=\"stopBtn\" className=\"button form-button5 time-button\" onClick={clickStopB}>Stop</button>\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  /* Action on a start btn.  */\r\n  let clickStartB = (e) => {\r\n    /* rerendering time first to show start time to another task */\r\n    setTime(timer)\r\n    BtnShower(e)\r\n    start = Date.now();\r\n    // console.log('start', start);\r\n  }\r\n\r\n  /* Action on a stop btn. Compute a period, update period into array and update time of current task   */\r\n  let clickStopB = (e) => {\r\n    let end = Date.now();\r\n    let period = end - start;\r\n\r\n    tasks.forEach((item) => {\r\n      if (item.status === 'active') {\r\n        item.period += period;\r\n        setTime(timer);\r\n        return null\r\n      }\r\n    })\r\n    BtnShower(e)\r\n  }\r\n  \r\n\r\n  const [stateBtn, setstateBtn] = useState(\r\n    <button id=\"srtBtn\" className=\"button form-button5 time-button\" onClick={clickStartB}>Start</button>\r\n  )\r\n\r\n  /* Change status on 'active' if was click on a task. */\r\n  let statusChanger = (e => {\r\n    setTime(timer);\r\n\r\n    tasks.forEach(item => {\r\n      if (item.status === 'active') {\r\n        item.status = '';\r\n        return null\r\n      }\r\n    });\r\n\r\n    tasks.forEach(item => {\r\n      if (item.id === e.target.id) {\r\n        item.status = 'active';\r\n        console.log('statusChanger-task', tasks);\r\n        return null\r\n      }\r\n    });\r\n\r\n    setTaskState(showTasks);\r\n  });\r\n\r\n  /* !Tasks rendering */\r\n\r\n  let showTasks = () => tasks.map(item => {\r\n    keyCounter ++;\r\n\r\n    if (item.status === 'active') {\r\n      return (\r\n        <div\r\n          key={keyCounter}\r\n          className='task active'\r\n          onClick={statusChanger}\r\n          id={item.id}\r\n        >\r\n          <p >{item.title}</p>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div\r\n          key={keyCounter}\r\n          className='task'\r\n          onClick={statusChanger}\r\n        >\r\n          <p id={item.id}>{item.title}</p>\r\n        </div>\r\n      )\r\n    }\r\n  })\r\n\r\n  /* Adding new tasks on a page at click on an add button. New task became automate active */\r\n  let taskAdder = e => {\r\n    e.preventDefault();\r\n    let taskTitle = e.target[0].value;\r\n    /* generate random number to create unique id  */\r\n    let idNumm = Math.floor(Math.random() * Math.floor(10000));\r\n    let id = taskTitle + idNumm;\r\n\r\n    tasks.forEach(item => {\r\n      if (item.status === 'active') {\r\n        item.status = ''\r\n        return null\r\n      }\r\n    });\r\n\r\n    let newTask = {\r\n      title: taskTitle,\r\n      id: id,\r\n      status: 'active',\r\n      period: 0\r\n    }\r\n\r\n    if (taskTitle.length === 0 ||taskTitle === \"add new task\" ) {\r\n      newTask.title = 'NewTask-' + counter;\r\n      counter += 1;\r\n    }\r\n\r\n    tasks.push(newTask);\r\n    setTaskState(showTasks);\r\n  }\r\n\r\n\r\n  /* for change time on a page */\r\n  const [time, setTime] = useState('0d 0h 0m 0s');\r\n\r\n  /* Show time  */\r\n  let timer = () => {\r\n    let currentTime = 0;\r\n\r\n    tasks.forEach((item) => {\r\n      if (item.status === 'active') {\r\n        currentTime = item.period;\r\n        return null\r\n      }\r\n    })\r\n    /* change ms to normal outlook */\r\n    let days = Math.floor(currentTime / (1000 * 60 * 60 * 24));\r\n    let hours = Math.floor((currentTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    let minutes = Math.floor((currentTime % (1000 * 60 * 60)) / (1000 * 60));\r\n    let seconds = Math.floor((currentTime % (1000 * 60)) / 1000);\r\n\r\n    let normTime = days + \"d \" + hours + \"h \"\r\n      + minutes + \"m \" + seconds + \"s \";\r\n\r\n    if (currentTime > 0) {\r\n      return normTime;\r\n    } else {\r\n      return '0d 0h 0m 0s';\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='main'>\r\n      <Name />\r\n      <Timer\r\n        time={time}\r\n        stateBtn={stateBtn}\r\n      />\r\n      <Task\r\n        taskAdder={taskAdder}\r\n        taskState={taskState}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}